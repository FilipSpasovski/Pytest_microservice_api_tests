const NB_PARAMETERS: usize = 17;
const WEIGHT: [[f32; NB_PARAMETERS]; 4] = [
    [
        -2.85128277e00,
        1.94825532e00,
        -6.68986532e00,
        -4.20970789e-01,
        8.61737485e-03,
        -7.66847448e00,
        2.91500727e-01,
        -2.00123712e00,
        6.18444222e-03,
        7.47298536e00,
        -8.30787905e-02,
        -2.56184838e00,
        2.31903355e-03,
        -4.69370504e-01,
        -1.27979448e-01,
        -1.20803956e-01,
        -2.77395592e-01,
    ],
    [
        -9.63184025e-01,
        1.96562249e00,
        2.61874038e00,
        -5.73915396e-01,
        3.07176554e-01,
        3.22113781e00,
        1.23299397e-01,
        -6.11642668e-01,
        5.94316029e-03,
        1.56190378e01,
        -1.89516574e00,
        -4.57866486e-01,
        -4.34615322e-02,
        -1.92086631e-01,
        1.47282082e00,
        8.60734522e-02,
        4.18422582e-01,
    ],
    [
        -4.48897526e00,
        -1.61445023e00,
        -8.71430737e-01,
        -2.01189320e00,
        1.47381370e-01,
        -2.10636875e00,
        -3.08887765e-01,
        1.95998020e-01,
        -5.26793695e-03,
        4.17689805e-01,
        1.57135678e00,
        -4.03363295e-01,
        6.34681934e-02,
        -6.58447090e-02,
        -4.39783986e-01,
        -8.39186065e-01,
        2.11697772e-01,
    ],
    [
        5.40838200e-01,
        -1.62479193e-01,
        -1.59984710e01,
        8.02586067e-01,
        -1.04048649e-02,
        -1.41794384e00,
        -1.89074500e-01,
        1.24114994e00,
        -1.05967162e-02,
        -1.28921456e01,
        2.58018086e00,
        -5.36715757e00,
        7.33812708e-02,
        -3.82830558e-01,
        6.51213122e-01,
        1.77615646e00,
        6.02104986e-01,
    ],
];

const BIAS: [f32; 4] = [3.51422175, -642.52539283, -267.07930106, 50.24613504];

// stupid (non rust way) translation of python version
pub(crate) fn inference(data: &[f32; NB_PARAMETERS]) -> u32 {
    let mut scores = vec![];
    for (weight_cat, b) in WEIGHT.iter().zip(&BIAS) {
        let mut score = *b;
        for (d, w) in data.iter().zip(weight_cat) {
            score += d * w;
        }
        scores.push(score);
    }

    // finding the index of the best score in scores
    let mut best_index = 0;
    let mut best_score = 0.0;
    for (i, s) in scores.iter().enumerate() {
        // dbg!((i, s));
        if *s > best_score {
            best_score = *s;
            best_index = i as u32;
        }
    }
    best_index
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_inference_happy_run_0() {
        let actual = inference(&[
            1.0, 8.0, 2.0, 16.0, 1983.0, 1.0, 14.75, 1.0, 590.0, 2.0, 3.0, 3.0, 0.0, 7.0, 7.0, 1.0,
            1.0,
        ]);
        assert_eq!(actual, 1);
    }
}
